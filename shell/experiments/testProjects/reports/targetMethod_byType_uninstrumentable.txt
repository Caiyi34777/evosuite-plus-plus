#------------------------------------------------------------------------
#Project=math  -  101_math
#------------------------------------------------------------------------
org.apache.commons.math.analysis.interpolation.LoessInterpolator#checkAllFiniteReal([DLorg/apache/commons/math/exception/util/Localizable;)V
org.apache.commons.math.analysis.polynomials.PolynomialFunction#equals(Ljava/lang/Object;)Z
org.apache.commons.math.complex.ComplexFormat#format(Lorg/apache/commons/math/complex/Complex;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;
org.apache.commons.math.complex.ComplexFormat#parse(Ljava/lang/String;)Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.ComplexFormat#setImaginaryCharacter(Ljava/lang/String;)V
org.apache.commons.math.dfp.Dfp#<init>(Lorg/apache/commons/math/dfp/DfpField;Ljava/lang/String;)V
org.apache.commons.math.distribution.AbstractIntegerDistribution#checkedCumulativeProbability(I)D
org.apache.commons.math.distribution.BetaDistributionImpl#recomputeZ()V
org.apache.commons.math.estimation.LevenbergMarquardtEstimator#qrDecomposition()V
org.apache.commons.math.exception.util.LocalizedFormats#getLocalizedString(Ljava/util/Locale;)Ljava/lang/String;
org.apache.commons.math.fraction.AbstractFormat#parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C
org.apache.commons.math.fraction.BigFractionFormat#parse(Ljava/lang/String;)Lorg/apache/commons/math/fraction/BigFraction;
org.apache.commons.math.fraction.BigFractionFormat#parseNextBigInteger(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/math/BigInteger;
org.apache.commons.math.fraction.BigFraction#<init>(Ljava/math/BigInteger;Ljava/math/BigInteger;)V
org.apache.commons.math.fraction.BigFraction#<init>(D)V
org.apache.commons.math.fraction.BigFraction#divide(Ljava/math/BigInteger;)Lorg/apache/commons/math/fraction/BigFraction;
org.apache.commons.math.fraction.BigFraction#divide(Lorg/apache/commons/math/fraction/BigFraction;)Lorg/apache/commons/math/fraction/BigFraction;
org.apache.commons.math.fraction.BigFraction#equals(Ljava/lang/Object;)Z
org.apache.commons.math.fraction.BigFraction#multiply(Lorg/apache/commons/math/fraction/BigFraction;)Lorg/apache/commons/math/fraction/BigFraction;
org.apache.commons.math.fraction.BigFraction#toString()Ljava/lang/String;
org.apache.commons.math.fraction.ProperBigFractionFormat#format(Lorg/apache/commons/math/fraction/BigFraction;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;
org.apache.commons.math.fraction.FractionFormat#parse(Ljava/lang/String;)Lorg/apache/commons/math/fraction/Fraction;
org.apache.commons.math.genetics.BinaryChromosome#isSame(Lorg/apache/commons/math/genetics/Chromosome;)Z
org.apache.commons.math.geometry.Vector3DFormat#parse(Ljava/lang/String;)Lorg/apache/commons/math/geometry/Vector3D;
org.apache.commons.math.geometry.Vector3D#isNaN()Z
org.apache.commons.math.linear.BigMatrixImpl#equals(Ljava/lang/Object;)Z
org.apache.commons.math.linear.AbstractFieldMatrix#equals(Ljava/lang/Object;)Z
org.apache.commons.math.linear.RealVectorFormat#parse(Ljava/lang/String;)Lorg/apache/commons/math/linear/ArrayRealVector;
org.apache.commons.math.linear.ArrayFieldVector#equals(Ljava/lang/Object;)Z
org.apache.commons.math.linear.ArrayRealVector#isNaN()Z
org.apache.commons.math.linear.SparseFieldMatrix#addToEntry(IILorg/apache/commons/math/FieldElement;)V
org.apache.commons.math.linear.SparseFieldMatrix#multiplyEntry(IILorg/apache/commons/math/FieldElement;)V
org.apache.commons.math.linear.SparseFieldMatrix#setEntry(IILorg/apache/commons/math/FieldElement;)V
org.apache.commons.math.linear.FieldLUDecompositionImpl#<init>(Lorg/apache/commons/math/linear/FieldMatrix;)V
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer#optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D
org.apache.commons.math.optimization.direct.DirectSearchOptimizer#evaluateSimplex(Ljava/util/Comparator;)V
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#qrDecomposition()V
org.apache.commons.math.optimization.linear.LinearConstraint#equals(Ljava/lang/Object;)Z
org.apache.commons.math.optimization.linear.LinearObjectiveFunction#equals(Ljava/lang/Object;)Z
org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer#getFunctionValue()D
org.apache.commons.math.random.BitsStreamGenerator#nextGaussian()D
org.apache.commons.math.random.AbstractRandomGenerator#nextGaussian()D
org.apache.commons.math.special.Gamma#logGamma(D)D
org.apache.commons.math.special.Gamma#regularizedGammaP(DDDI)D
org.apache.commons.math.special.Gamma#regularizedGammaQ(DDDI)D
org.apache.commons.math.special.Beta#regularizedBeta(DDDDI)D
org.apache.commons.math.special.Beta#logBeta(DDDI)D
org.apache.commons.math.stat.Frequency#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics#aggregate(Ljava/util/Collection;)Lorg/apache/commons/math/stat/descriptive/StatisticalSummaryValues;
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic#test([D[DII)Z
org.apache.commons.math.stat.descriptive.moment.VectorialCovariance#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.descriptive.moment.VectorialMean#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.descriptive.rank.Min#increment(D)V
org.apache.commons.math.stat.descriptive.rank.Min#evaluate([DII)D
org.apache.commons.math.stat.descriptive.rank.Max#increment(D)V
org.apache.commons.math.stat.descriptive.rank.Max#evaluate([DII)D
org.apache.commons.math.stat.ranking.NaturalRanking#recodeNaNs([Lorg/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair;D)V
org.apache.commons.math.stat.ranking.NaturalRanking#containsNaNs([Lorg/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair;)Z
org.apache.commons.math.stat.ranking.NaturalRanking#getNanPositions([Lorg/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair;)Ljava/util/List;
org.apache.commons.math.util.ContinuedFraction#evaluate(DDI)D
org.apache.commons.math.util.TransformerMap#equals(Ljava/lang/Object;)Z
org.apache.commons.math.util.MathUtils#<clinit>()V
org.apache.commons.math.util.MathUtils#equals(FF)Z
org.apache.commons.math.util.MathUtils#equals(DD)Z
org.apache.commons.math.util.MathUtils#indicator(D)D
org.apache.commons.math.util.MathUtils#indicator(F)F
org.apache.commons.math.util.MathUtils#nextAfter(DD)D
org.apache.commons.math.util.MathUtils#normalizeArray([DD)[D
org.apache.commons.math.util.MathUtils#round(DII)D
org.apache.commons.math.util.MathUtils#sign(D)D
org.apache.commons.math.util.MathUtils#sign(F)F
org.apache.commons.math.util.MathUtils#pow(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
org.apache.commons.math.util.CompositeFormat#parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C
org.apache.commons.math.util.CompositeFormat#parseNumber(Ljava/lang/String;DLjava/text/ParsePosition;)Ljava/lang/Number;
org.apache.commons.math.util.CompositeFormat#parseFixedstring(Ljava/lang/String;Ljava/lang/String;Ljava/text/ParsePosition;)Z
org.apache.commons.math.util.CompositeFormat#formatDouble(DLjava/text/NumberFormat;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;
org.apache.commons.math.util.FastMath#log1p(D)D
org.apache.commons.math.util.FastMath#log10(D)D
org.apache.commons.math.util.FastMath#pow(DD)D
org.apache.commons.math.util.FastMath#atan2(DD)D
org.apache.commons.math.util.FastMath#acos(D)D
org.apache.commons.math.util.FastMath#toRadians(D)D
org.apache.commons.math.util.FastMath#toDegrees(D)D
org.apache.commons.math.util.FastMath#ulp(D)D
org.apache.commons.math.util.FastMath#ulp(F)F
org.apache.commons.math.util.FastMath#scalb1(DI)D
org.apache.commons.math.util.FastMath#scalb2(FI)F
org.apache.commons.math.util.FastMath#nextAfter1(DD)D
org.apache.commons.math.util.FastMath#nextAfter2(FD)F
org.apache.commons.math.util.FastMath#hypot(DD)D
org.apache.commons.math.TestUtils#assertEquals(Ljava/lang/String;DDD)V
org.apache.commons.math.TestUtils#assertRelativelyEquals(Ljava/lang/String;DDD)V
org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations()V
org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters()V
org.apache.commons.math.ode.TestProblemHandler#handleStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;Z)V
org.apache.commons.math.optimization.linear.SimplexSolverTest#equationFromString(ILjava/lang/String;)Lorg/apache/commons/math/optimization/linear/LinearConstraint;
org.apache.commons.math.random.RandomDataTest#testNextSample()V
org.apache.commons.math.random.RandomDataTest#findSample([Ljava/lang/Object;[Ljava/lang/Object;)I
org.apache.commons.math.stat.data.CertifiedDataAbstractTest#loadData()V
org.apache.commons.math.stat.data.CertifiedDataAbstractTest#getProperty(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Double;
org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions()V
org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions()V
org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions()V
org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#<clinit>()V
org.apache.commons.math.util.FastMathStrictComparisonTest#isNumber(Ljava/lang/Double;)Z
org.apache.commons.math.util.FastMathStrictComparisonTest#isNumber(Ljava/lang/Float;)Z
org.apache.commons.math.util.FastMathStrictComparisonTest#callMethods(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;[Ljava/lang/Object;[I)V
org.apache.commons.math.util.FastMathStrictComparisonTest#data()Ljava/util/List;
org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge()V
org.apache.commons.math.util.FastMathTest#compareClassMethods(Ljava/lang/Class;Ljava/lang/Class;)Z
org.apache.commons.math.analysis.solvers.RiddersSolver#solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D
org.apache.commons.math.analysis.solvers.MullerSolver#solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D
org.apache.commons.math.analysis.solvers.MullerSolver#solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D
org.apache.commons.math.analysis.solvers.LaguerreSolver#solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D
org.apache.commons.math.analysis.solvers.LaguerreSolver#isRootOK(DDLorg/apache/commons/math/complex/Complex;)Z
org.apache.commons.math.complex.ComplexFormat#parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.geometry.Vector3DFormat#parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/geometry/Vector3D;
org.apache.commons.math.linear.RealVectorFormat#parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/linear/ArrayRealVector;
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator#initializeArrays()V
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator#integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator#integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D
org.apache.commons.math.random.BitsStreamGenerator#nextBoolean()Z
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate([DII)D
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic#incrementAll([DII)V
org.apache.commons.math.stat.descriptive.moment.Mean#evaluate([DII)D
org.apache.commons.math.stat.descriptive.moment.Mean#evaluate([D[DII)D
org.apache.commons.math.stat.descriptive.moment.Variance#evaluate([DII)D
org.apache.commons.math.stat.descriptive.moment.Variance#evaluate([D[DII)D
org.apache.commons.math.stat.descriptive.moment.Variance#evaluate([DDII)D
org.apache.commons.math.stat.descriptive.moment.Variance#evaluate([D[DDII)D
org.apache.commons.math.stat.descriptive.moment.Skewness#evaluate([DII)D
org.apache.commons.math.stat.descriptive.moment.Kurtosis#evaluate([DII)D
org.apache.commons.math.stat.descriptive.summary.Product#evaluate([DII)D
org.apache.commons.math.stat.descriptive.summary.Product#evaluate([D[DII)D
org.apache.commons.math.stat.descriptive.summary.SumOfSquares#evaluate([DII)D
org.apache.commons.math.stat.descriptive.summary.Sum#evaluate([DII)D
org.apache.commons.math.stat.descriptive.summary.Sum#evaluate([D[DII)D
org.apache.commons.math.stat.descriptive.summary.SumOfLogs#evaluate([DII)D
org.apache.commons.math.stat.regression.OLSMultipleLinearRegression#calculateTotalSumOfSquares()D
org.apache.commons.math.stat.regression.OLSMultipleLinearRegression#calculateAdjustedRSquared()D
org.apache.commons.math.random.Well1024aTest#testNexBoolean()V
org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean()V
org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean()V
#------------------------------------------------------------------------
#Project=colt  -  102_colt
#------------------------------------------------------------------------
cern.colt.bitvector.BitMatrix#replaceBoxWith(IIIILcern/colt/bitvector/BitMatrix;II)V
cern.colt.list.ObjectArrayList#equals(Ljava/lang/Object;Z)Z
cern.colt.list.ObjectArrayList#indexOfFromTo(Ljava/lang/Object;IIZ)I
cern.colt.list.ObjectArrayList#lastIndexOfFromTo(Ljava/lang/Object;IIZ)I
cern.colt.map.Benchmark#benchmark(IILjava/lang/String;)V
cern.colt.matrix.ObjectMatrix3D#equals(Ljava/lang/Object;Z)Z
cern.colt.matrix.ObjectMatrix2D#equals(Ljava/lang/Object;Z)Z
cern.colt.matrix.ObjectMatrix1D#equals(Ljava/lang/Object;Z)Z
cern.colt.matrix.bench.BenchmarkMatrix#getFactory(Ljava/lang/String;)Lcern/colt/matrix/DoubleFactory2D;
cern.colt.matrix.bench.BenchmarkMatrix#getGenericFunction(Ljava/lang/String;)Lcern/colt/matrix/bench/Double2DProcedure;
cern.colt.matrix.bench.BenchmarkMatrix#handle([Ljava/lang/String;)Z
cern.colt.matrix.bench.BenchmarkMatrix#main([Ljava/lang/String;)V
cern.colt.matrix.bench.BenchmarkMatrix#usage(Ljava/lang/String;)Ljava/lang/String;
cern.colt.matrix.doublealgo.Formatter#lead(Ljava/lang/String;)I
cern.colt.matrix.impl.RCDoubleMatrix2D#<init>(II)V
cern.colt.matrix.impl.BenchmarkMatrix2D#doubleBenchmark(IIILjava/lang/String;ZIDD)V
cern.colt.matrix.impl.BenchmarkMatrix2D#doubleBenchmarkMult(IIILjava/lang/String;ZIDD)V
cern.colt.matrix.impl.BenchmarkMatrix2D#main([Ljava/lang/String;)V
cern.colt.matrix.impl.AbstractFormatter#alignmentCode(Ljava/lang/String;)I
cern.colt.matrix.impl.AbstractFormatter#alignRow([Ljava/lang/String;[I[I)V
cern.jet.stat.quantile.Quantile1Test#main([Ljava/lang/String;)V
corejava.Format#atol(Ljava/lang/String;)J
corejava.Format#parseLong(Ljava/lang/String;I)J
corejava.Format#atof(Ljava/lang/String;)D
corejava.Format#format(D)Ljava/lang/String;
hep.aida.ref.Converter#toXML(Lhep/aida/IHistogram1D;)Ljava/lang/String;
hep.aida.ref.Test#writeAsXML(Lhep/aida/IHistogram1D;Ljava/lang/String;)V
cern.colt.list.AbstractCollection#isEmpty()Z
cern.colt.matrix.DoubleMatrix1D#zSum()D
cern.colt.matrix.ObjectMatrix3D#aggregate(Lcern/colt/function/ObjectObjectFunction;Lcern/colt/function/ObjectFunction;)Ljava/lang/Object;
cern.colt.matrix.ObjectMatrix3D#aggregate(Lcern/colt/matrix/ObjectMatrix3D;Lcern/colt/function/ObjectObjectFunction;Lcern/colt/function/ObjectObjectFunction;)Ljava/lang/Object;
cern.colt.matrix.DoubleMatrix3D#aggregate(Lcern/colt/function/DoubleDoubleFunction;Lcern/colt/function/DoubleFunction;)D
cern.colt.matrix.DoubleMatrix3D#aggregate(Lcern/colt/matrix/DoubleMatrix3D;Lcern/colt/function/DoubleDoubleFunction;Lcern/colt/function/DoubleDoubleFunction;)D
cern.colt.matrix.DoubleMatrix3D#zSum()D
cern.colt.matrix.ObjectMatrix2D#aggregate(Lcern/colt/function/ObjectObjectFunction;Lcern/colt/function/ObjectFunction;)Ljava/lang/Object;
cern.colt.matrix.ObjectMatrix2D#aggregate(Lcern/colt/matrix/ObjectMatrix2D;Lcern/colt/function/ObjectObjectFunction;Lcern/colt/function/ObjectObjectFunction;)Ljava/lang/Object;
cern.colt.matrix.DoubleMatrix2D#aggregate(Lcern/colt/function/DoubleDoubleFunction;Lcern/colt/function/DoubleFunction;)D
cern.colt.matrix.DoubleMatrix2D#aggregate(Lcern/colt/matrix/DoubleMatrix2D;Lcern/colt/function/DoubleDoubleFunction;Lcern/colt/function/DoubleDoubleFunction;)D
cern.colt.matrix.DoubleMatrix2D#zSum()D
cern.colt.matrix.doublealgo.Formatter#toTitleString(Lcern/colt/matrix/DoubleMatrix2D;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
cern.colt.matrix.doublealgo.Formatter#toTitleString(Lcern/colt/matrix/DoubleMatrix2D;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Lhep/aida/bin/BinFunction1D;)Ljava/lang/String;
cern.colt.matrix.doublealgo.Formatter#toTitleString(Lcern/colt/matrix/DoubleMatrix3D;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Lhep/aida/bin/BinFunction1D;)Ljava/lang/String;
cern.colt.matrix.doublealgo.Formatter#xtoTitleString(Lcern/colt/matrix/DoubleMatrix3D;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
cern.colt.matrix.impl.DenseDoubleMatrix3D#assign(Lcern/colt/matrix/DoubleMatrix3D;)Lcern/colt/matrix/DoubleMatrix3D;
cern.colt.matrix.impl.DenseDoubleMatrix2D#assign(Lcern/colt/matrix/DoubleMatrix2D;)Lcern/colt/matrix/DoubleMatrix2D;
cern.colt.matrix.impl.DenseDoubleMatrix1D#assign(Lcern/colt/matrix/DoubleMatrix1D;)Lcern/colt/matrix/DoubleMatrix1D;
cern.colt.matrix.impl.DenseObjectMatrix2D#assign(Lcern/colt/matrix/ObjectMatrix2D;)Lcern/colt/matrix/ObjectMatrix2D;
cern.colt.matrix.impl.DenseObjectMatrix1D#assign(Lcern/colt/matrix/ObjectMatrix1D;)Lcern/colt/matrix/ObjectMatrix1D;
cern.colt.matrix.impl.DenseObjectMatrix3D#assign(Lcern/colt/matrix/ObjectMatrix3D;)Lcern/colt/matrix/ObjectMatrix3D;
cern.colt.matrix.linalg.Algebra#norm1(Lcern/colt/matrix/DoubleMatrix1D;)D
cern.colt.matrix.linalg.Algebra#normF(Lcern/colt/matrix/DoubleMatrix2D;)D
cern.colt.matrix.linalg.Algebra#normInfinity(Lcern/colt/matrix/DoubleMatrix1D;)D
cern.colt.matrix.objectalgo.Formatter#toTitleString(Lcern/colt/matrix/ObjectMatrix2D;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
cern.colt.matrix.objectalgo.Formatter#toTitleString(Lcern/colt/matrix/ObjectMatrix3D;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
cern.jet.stat.quantile.DoubleBufferSet#_getPartialBuffer()Lcern/jet/stat/quantile/DoubleBuffer;
cern.jet.stat.quantile.DoubleQuantileEstimator#addAllOfFromTo(Lcern/colt/list/DoubleArrayList;II)V
cern.jet.stat.quantile.DoubleBuffer#isEmpty()Z
cern.jet.stat.quantile.Buffer#isPartial()Z
hep.aida.bin.MightyStaticBin1D#xequals(Ljava/lang/Object;)Z
#------------------------------------------------------------------------
#Project=jblas  -  103_jblas
#------------------------------------------------------------------------
org.jblas.ComplexFloatMatrix#<clinit>()V
org.jblas.ComplexFloatMatrix#in(Ljava/io/DataInputStream;)V
org.jblas.ComplexDoubleMatrix#<clinit>()V
org.jblas.ComplexDoubleMatrix#in(Ljava/io/DataInputStream;)V
org.jblas.NativeBlasLibraryLoader#loadLibraryAndCheckErrors()V
org.jblas.NativeBlasLibraryLoader#loadDependentLibraries()V
org.jblas.FloatMatrix#<clinit>()V
org.jblas.FloatMatrix#in(Ljava/io/DataInputStream;)V
org.jblas.FloatMatrix#loadAsciiFile(Ljava/lang/String;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#loadCSVFile(Ljava/lang/String;)Lorg/jblas/FloatMatrix;
org.jblas.DoubleMatrix#<clinit>()V
org.jblas.DoubleMatrix#in(Ljava/io/DataInputStream;)V
org.jblas.DoubleMatrix#loadAsciiFile(Ljava/lang/String;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#loadCSVFile(Ljava/lang/String;)Lorg/jblas/DoubleMatrix;
org.jblas.benchmark.Main#main([Ljava/lang/String;)V
org.jblas.util.ArchFlavor#archFlavor()Ljava/lang/String;
org.jblas.util.SanityChecks#<clinit>()V
org.jblas.util.SanityChecks#main([Ljava/lang/String;)V
org.jblas.util.LibraryLoader#<clinit>()V
org.jblas.util.LibraryLoader#loadLibrary(Ljava/lang/String;Z)V
org.jblas.util.LibraryLoader#unifyOSName(Ljava/lang/String;)Ljava/lang/String;
org.jblas.util.Permutations#<clinit>()V
#------------------------------------------------------------------------
#Project=jscience  -  104_jscience
#------------------------------------------------------------------------
javax.measure.Measure#longValue(Ljavax/measure/unit/Unit;)J
javax.measure.Measure#equals(Ljava/lang/Object;)Z
javax.measure.DecimalMeasure#valueOf(Ljava/lang/CharSequence;)Ljavax/measure/DecimalMeasure;
javax.measure.DecimalMeasure#to(Ljavax/measure/unit/Unit;Ljava/math/MathContext;)Ljavax/measure/DecimalMeasure;
javax.measure.DecimalMeasure#doubleValue(Ljavax/measure/unit/Unit;)D
javax.measure.unit.Dimension#equals(Ljava/lang/Object;)Z
javax.measure.unit.TransformedUnit#equals(Ljava/lang/Object;)Z
javax.measure.unit.Unit#isCompatible(Ljavax/measure/unit/Unit;)Z
javax.measure.unit.Unit#asType(Ljava/lang/Class;)Ljavax/measure/unit/Unit;
javax.measure.unit.Unit#getConverterTo(Ljavax/measure/unit/Unit;)Ljavax/measure/converter/UnitConverter;
javax.measure.unit.Unit#transformOf(Ljavax/measure/unit/Unit;)Ljavax/measure/converter/UnitConverter;
javax.measure.unit.AlternateUnit#<init>(Ljava/lang/String;Ljavax/measure/unit/Unit;)V
javax.measure.unit.UnitFormat#<clinit>()V
javax.measure.unit.CompoundUnit#<init>(Ljavax/measure/unit/Unit;Ljavax/measure/unit/Unit;)V
javax.measure.unit.CompoundUnit#equals(Ljava/lang/Object;)Z
javax.measure.unit.ProductUnit#getInstance([Ljavax/measure/unit/ProductUnit$Element;[Ljavax/measure/unit/ProductUnit$Element;)Ljavax/measure/unit/Unit;
javax.measure.unit.ProductUnit#equals(Ljava/lang/Object;)Z
javax.measure.unit.ProductUnit#getStandardUnit()Ljavax/measure/unit/Unit;
javax.measure.unit.ProductUnit#toStandardUnit()Ljavax/measure/converter/UnitConverter;
javax.measure.unit.ProductUnit#hasOnlyStandardUnit()Z
org.jscience.JScience#main([Ljava/lang/String;)V
org.jscience.geography.coordinates.UTM#eastingValue(Ljavax/measure/unit/Unit;)D
org.jscience.geography.coordinates.UTM#northingValue(Ljavax/measure/unit/Unit;)D
org.jscience.geography.coordinates.Height#doubleValue(Ljavax/measure/unit/Unit;)D
org.jscience.geography.coordinates.Time#doubleValue(Ljavax/measure/unit/Unit;)D
org.jscience.mathematics.function.Term#equals(Ljava/lang/Object;)Z
org.jscience.mathematics.function.Function#getVariable(Ljava/lang/String;)Lorg/jscience/mathematics/function/Variable;
org.jscience.mathematics.number.Real#valueOf(D)Lorg/jscience/mathematics/number/Real;
org.jscience.mathematics.number.FloatingPoint#valueOf(D)Lorg/jscience/mathematics/number/FloatingPoint;
org.jscience.mathematics.vector.Vector#equals(Ljava/lang/Object;)Z
org.jscience.mathematics.vector.SparseMatrix#valueOf([Lorg/jscience/mathematics/vector/SparseVector;)Lorg/jscience/mathematics/vector/SparseMatrix;
org.jscience.mathematics.vector.SparseMatrix#valueOf(Ljava/util/List;)Lorg/jscience/mathematics/vector/SparseMatrix;
org.jscience.mathematics.vector.SparseMatrix#times(Lorg/jscience/mathematics/vector/Vector;)Lorg/jscience/mathematics/vector/SparseVector;
org.jscience.mathematics.vector.SparseMatrix#times(Lorg/jscience/mathematics/vector/Matrix;)Lorg/jscience/mathematics/vector/SparseMatrix;
org.jscience.mathematics.vector.SparseMatrix#adjoint()Lorg/jscience/mathematics/vector/SparseMatrix;
org.jscience.mathematics.vector.SparseMatrix#tensor(Lorg/jscience/mathematics/vector/Matrix;)Lorg/jscience/mathematics/vector/SparseMatrix;
org.jscience.mathematics.vector.Matrix#equals(Ljava/lang/Object;)Z
org.jscience.physics.amount.Amount#to(Ljavax/measure/unit/Unit;)Lorg/jscience/physics/amount/Amount;
org.jscience.physics.amount.Amount#equals(Ljava/lang/Object;)Z
org.jscience.physics.amount.Amount#doubleValue(Ljavax/measure/unit/Unit;)D
org.jscience.physics.amount.Amount#longValue(Ljavax/measure/unit/Unit;)J
org.jscience.physics.model.NaturalModel#getDimension(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/unit/Dimension;
org.jscience.physics.model.NaturalModel#getTransform(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/converter/UnitConverter;
org.jscience.physics.model.QuantumModel#getDimension(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/unit/Dimension;
org.jscience.physics.model.QuantumModel#getTransform(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/converter/UnitConverter;
org.jscience.physics.model.RelativisticModel#getDimension(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/unit/Dimension;
org.jscience.physics.model.RelativisticModel#getTransform(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/converter/UnitConverter;
org.jscience.physics.model.HighEnergyModel#getDimension(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/unit/Dimension;
org.jscience.physics.model.HighEnergyModel#getTransform(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/converter/UnitConverter;
org.jscience.mathematics.vector.Float64Matrix#inverse()Lorg/jscience/mathematics/vector/Float64Matrix;
org.jscience.mathematics.vector.SparseVector#valueOf(Lorg/jscience/mathematics/vector/Vector;Lorg/jscience/mathematics/structure/Field;Ljavolution/util/FastComparator;)Lorg/jscience/mathematics/vector/SparseVector;
org.jscience.mathematics.vector.SparseVector#valueOf(Lorg/jscience/mathematics/vector/SparseVector;Lorg/jscience/mathematics/structure/Field;Ljavolution/util/FastComparator;)Lorg/jscience/mathematics/vector/SparseVector;
org.jscience.mathematics.vector.SparseMatrix#inverse()Lorg/jscience/mathematics/vector/SparseMatrix;
org.jscience.mathematics.vector.SparseMatrix#determinant()Lorg/jscience/mathematics/structure/Field;
org.jscience.mathematics.vector.ComplexMatrix#inverse()Lorg/jscience/mathematics/vector/ComplexMatrix;
org.jscience.mathematics.vector.DenseMatrix#inverse()Lorg/jscience/mathematics/vector/DenseMatrix;
#-------- Total: 280--------