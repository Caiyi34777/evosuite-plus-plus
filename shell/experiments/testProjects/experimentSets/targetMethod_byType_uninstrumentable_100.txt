#------------------------------------------------------------------------
#Project=math  -  101_math
#------------------------------------------------------------------------
org.apache.commons.math.util.CompositeFormat#parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C
org.apache.commons.math.fraction.BigFraction#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.Frequency#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.descriptive.moment.Variance#evaluate([D[DII)D
org.apache.commons.math.util.FastMath#toRadians(D)D
org.apache.commons.math.util.CompositeFormat#parseFixedstring(Ljava/lang/String;Ljava/lang/String;Ljava/text/ParsePosition;)Z
org.apache.commons.math.stat.ranking.NaturalRanking#containsNaNs([Lorg/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair;)Z
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator#initializeArrays()V
org.apache.commons.math.distribution.BetaDistributionImpl#recomputeZ()V
org.apache.commons.math.linear.SparseFieldMatrix#setEntry(IILorg/apache/commons/math/FieldElement;)V
org.apache.commons.math.fraction.BigFraction#<init>(D)V
org.apache.commons.math.exception.util.LocalizedFormats#getLocalizedString(Ljava/util/Locale;)Ljava/lang/String;
org.apache.commons.math.util.FastMath#log1p(D)D
org.apache.commons.math.stat.descriptive.moment.Skewness#evaluate([DII)D
org.apache.commons.math.stat.descriptive.rank.Max#evaluate([DII)D
org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer#getFunctionValue()D
org.apache.commons.math.complex.ComplexFormat#parse(Ljava/lang/String;)Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.stat.descriptive.summary.SumOfLogs#evaluate([DII)D
org.apache.commons.math.util.FastMathStrictComparisonTest#isNumber(Ljava/lang/Float;)Z
org.apache.commons.math.linear.ArrayFieldVector#equals(Ljava/lang/Object;)Z
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator#integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D
org.apache.commons.math.linear.FieldLUDecompositionImpl#<init>(Lorg/apache/commons/math/linear/FieldMatrix;)V
org.apache.commons.math.stat.descriptive.rank.Max#increment(D)V
org.apache.commons.math.linear.RealVectorFormat#parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/linear/ArrayRealVector;
org.apache.commons.math.fraction.FractionFormat#parse(Ljava/lang/String;)Lorg/apache/commons/math/fraction/Fraction;
org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge()V
org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#<clinit>()V
org.apache.commons.math.util.FastMath#log10(D)D
org.apache.commons.math.analysis.solvers.LaguerreSolver#solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D
org.apache.commons.math.util.FastMath#pow(DD)D
org.apache.commons.math.util.MathUtils#equals(DD)Z
org.apache.commons.math.analysis.solvers.RiddersSolver#solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D
org.apache.commons.math.stat.descriptive.summary.SumOfSquares#evaluate([DII)D
org.apache.commons.math.stat.descriptive.moment.Variance#evaluate([DII)D
org.apache.commons.math.stat.data.CertifiedDataAbstractTest#loadData()V
org.apache.commons.math.stat.descriptive.AggregateSummaryStatistics#aggregate(Ljava/util/Collection;)Lorg/apache/commons/math/stat/descriptive/StatisticalSummaryValues;
org.apache.commons.math.util.CompositeFormat#parseNumber(Ljava/lang/String;DLjava/text/ParsePosition;)Ljava/lang/Number;
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic#test([D[DII)Z
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate([DII)D
org.apache.commons.math.random.RandomDataTest#findSample([Ljava/lang/Object;[Ljava/lang/Object;)I
org.apache.commons.math.util.MathUtils#pow(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
org.apache.commons.math.random.BitsStreamGenerator#nextGaussian()D
org.apache.commons.math.stat.descriptive.moment.VectorialCovariance#equals(Ljava/lang/Object;)Z
org.apache.commons.math.util.FastMath#ulp(D)D
org.apache.commons.math.fraction.ProperBigFractionFormat#format(Lorg/apache/commons/math/fraction/BigFraction;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;
org.apache.commons.math.util.FastMath#acos(D)D
org.apache.commons.math.stat.descriptive.summary.Product#evaluate([DII)D
org.apache.commons.math.util.FastMath#toDegrees(D)D
#------------------------------------------------------------------------
#Project=colt  -  102_colt
#------------------------------------------------------------------------
cern.colt.matrix.linalg.Algebra#normF(Lcern/colt/matrix/DoubleMatrix2D;)D
cern.colt.matrix.impl.DenseObjectMatrix3D#assign(Lcern/colt/matrix/ObjectMatrix3D;)Lcern/colt/matrix/ObjectMatrix3D;
cern.colt.matrix.DoubleMatrix2D#zSum()D
cern.colt.matrix.doublealgo.Formatter#xtoTitleString(Lcern/colt/matrix/DoubleMatrix3D;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
cern.colt.matrix.bench.BenchmarkMatrix#handle([Ljava/lang/String;)Z
cern.colt.matrix.impl.BenchmarkMatrix2D#doubleBenchmark(IIILjava/lang/String;ZIDD)V
cern.colt.matrix.doublealgo.Formatter#toTitleString(Lcern/colt/matrix/DoubleMatrix3D;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Lhep/aida/bin/BinFunction1D;)Ljava/lang/String;
cern.colt.matrix.linalg.Algebra#normInfinity(Lcern/colt/matrix/DoubleMatrix1D;)D
cern.colt.matrix.ObjectMatrix2D#aggregate(Lcern/colt/function/ObjectObjectFunction;Lcern/colt/function/ObjectFunction;)Ljava/lang/Object;
cern.colt.matrix.ObjectMatrix3D#aggregate(Lcern/colt/function/ObjectObjectFunction;Lcern/colt/function/ObjectFunction;)Ljava/lang/Object;
cern.colt.matrix.impl.DenseObjectMatrix2D#assign(Lcern/colt/matrix/ObjectMatrix2D;)Lcern/colt/matrix/ObjectMatrix2D;
cern.colt.matrix.bench.BenchmarkMatrix#usage(Ljava/lang/String;)Ljava/lang/String;
cern.colt.matrix.DoubleMatrix2D#aggregate(Lcern/colt/function/DoubleDoubleFunction;Lcern/colt/function/DoubleFunction;)D
cern.colt.matrix.doublealgo.Formatter#lead(Ljava/lang/String;)I
cern.colt.matrix.impl.AbstractFormatter#alignRow([Ljava/lang/String;[I[I)V
cern.colt.matrix.impl.DenseDoubleMatrix1D#assign(Lcern/colt/matrix/DoubleMatrix1D;)Lcern/colt/matrix/DoubleMatrix1D;
corejava.Format#format(D)Ljava/lang/String;
cern.colt.matrix.DoubleMatrix2D#aggregate(Lcern/colt/matrix/DoubleMatrix2D;Lcern/colt/function/DoubleDoubleFunction;Lcern/colt/function/DoubleDoubleFunction;)D
cern.colt.matrix.impl.BenchmarkMatrix2D#main([Ljava/lang/String;)V
#------------------------------------------------------------------------
#Project=jblas  -  103_jblas
#------------------------------------------------------------------------
org.jblas.FloatMatrix#loadAsciiFile(Ljava/lang/String;)Lorg/jblas/FloatMatrix;
org.jblas.benchmark.Main#main([Ljava/lang/String;)V
org.jblas.util.Permutations#<clinit>()V
org.jblas.NativeBlasLibraryLoader#loadDependentLibraries()V
org.jblas.util.LibraryLoader#unifyOSName(Ljava/lang/String;)Ljava/lang/String;
org.jblas.util.ArchFlavor#archFlavor()Ljava/lang/String;
#------------------------------------------------------------------------
#Project=jscience  -  104_jscience
#------------------------------------------------------------------------
javax.measure.unit.TransformedUnit#equals(Ljava/lang/Object;)Z
javax.measure.Measure#equals(Ljava/lang/Object;)Z
org.jscience.mathematics.function.Function#getVariable(Ljava/lang/String;)Lorg/jscience/mathematics/function/Variable;
org.jscience.physics.amount.Amount#equals(Ljava/lang/Object;)Z
org.jscience.physics.model.HighEnergyModel#getDimension(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/unit/Dimension;
javax.measure.unit.ProductUnit#equals(Ljava/lang/Object;)Z
javax.measure.unit.CompoundUnit#<init>(Ljavax/measure/unit/Unit;Ljavax/measure/unit/Unit;)V
org.jscience.mathematics.vector.SparseMatrix#valueOf([Lorg/jscience/mathematics/vector/SparseVector;)Lorg/jscience/mathematics/vector/SparseMatrix;
org.jscience.mathematics.vector.DenseMatrix#inverse()Lorg/jscience/mathematics/vector/DenseMatrix;
org.jscience.mathematics.vector.SparseMatrix#times(Lorg/jscience/mathematics/vector/Matrix;)Lorg/jscience/mathematics/vector/SparseMatrix;
javax.measure.DecimalMeasure#valueOf(Ljava/lang/CharSequence;)Ljavax/measure/DecimalMeasure;
org.jscience.mathematics.vector.SparseVector#valueOf(Lorg/jscience/mathematics/vector/SparseVector;Lorg/jscience/mathematics/structure/Field;Ljavolution/util/FastComparator;)Lorg/jscience/mathematics/vector/SparseVector;
org.jscience.mathematics.vector.Float64Matrix#inverse()Lorg/jscience/mathematics/vector/Float64Matrix;
javax.measure.unit.ProductUnit#getInstance([Ljavax/measure/unit/ProductUnit$Element;[Ljavax/measure/unit/ProductUnit$Element;)Ljavax/measure/unit/Unit;
org.jscience.physics.model.QuantumModel#getTransform(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/converter/UnitConverter;
org.jscience.physics.model.QuantumModel#getDimension(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/unit/Dimension;
org.jscience.mathematics.vector.SparseMatrix#inverse()Lorg/jscience/mathematics/vector/SparseMatrix;
javax.measure.unit.ProductUnit#getStandardUnit()Ljavax/measure/unit/Unit;
org.jscience.physics.model.RelativisticModel#getTransform(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/converter/UnitConverter;
javax.measure.unit.UnitFormat#<clinit>()V
org.jscience.physics.model.NaturalModel#getTransform(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/converter/UnitConverter;
org.jscience.mathematics.number.Real#valueOf(D)Lorg/jscience/mathematics/number/Real;
javax.measure.unit.Unit#transformOf(Ljavax/measure/unit/Unit;)Ljavax/measure/converter/UnitConverter;
org.jscience.physics.model.NaturalModel#getDimension(Ljavax/measure/unit/BaseUnit;)Ljavax/measure/unit/Dimension;
javax.measure.unit.Dimension#equals(Ljava/lang/Object;)Z
org.jscience.mathematics.vector.Matrix#equals(Ljava/lang/Object;)Z
org.jscience.physics.amount.Amount#doubleValue(Ljavax/measure/unit/Unit;)D
#-------- Total: 100--------