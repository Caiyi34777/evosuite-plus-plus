#------------------------------------------------------------------------
#Project=math  -  101_math
#------------------------------------------------------------------------
org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction#<init>([D[Lorg/apache/commons/math/analysis/polynomials/PolynomialFunction;)V
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl#verifySequence(DDD)V
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl#verifyBracketing(DDLorg/apache/commons/math/analysis/UnivariateRealFunction;)V
org.apache.commons.math.analysis.solvers.LaguerreSolver#solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D
org.apache.commons.math.dfp.Dfp#multiply(I)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.Dfp#divide(I)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.linear.OpenMapRealVector#setEntry(ID)V
org.apache.commons.math.linear.OpenMapRealVector#subtract([D)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.linear.EigenDecompositionImpl#<init>(Lorg/apache/commons/math/linear/RealMatrix;D)V
org.apache.commons.math.ode.AbstractIntegrator#acceptStep(Lorg/apache/commons/math/ode/sampling/AbstractStepInterpolator;[D[DD)D
org.apache.commons.math.ode.events.CombinedEventsManager#reset(D[D)Z
org.apache.commons.math.optimization.fitting.GaussianParametersGuesser#getInterpolationPointsForY([Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;IID)[Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;
org.apache.commons.math.optimization.linear.SimplexTableau#getBasicRow(I)Ljava/lang/Integer;
org.apache.commons.math.optimization.linear.SimplexSolver#getPivotRow(Lorg/apache/commons/math/optimization/linear/SimplexTableau;I)Ljava/lang/Integer;
org.apache.commons.math.transform.FastCosineTransformer#fct([D)[D
org.apache.commons.math.transform.FastFourierTransformer#verifyDataSet([D)V
org.apache.commons.math.transform.FastHadamardTransformer#fht([D)[D
org.apache.commons.math.transform.FastHadamardTransformer#fht([I)[I
org.apache.commons.math.util.OpenIntToFieldHashMap#get(I)Lorg/apache/commons/math/FieldElement;
org.apache.commons.math.util.OpenIntToFieldHashMap#containsKey(I)Z
org.apache.commons.math.util.OpenIntToFieldHashMap#remove(I)Lorg/apache/commons/math/FieldElement;
org.apache.commons.math.util.MathUtils#compareTo(DDD)I
org.apache.commons.math.util.MathUtils#equalsIncludingNaN(FF)Z
org.apache.commons.math.util.MathUtils#equals(FFF)Z
org.apache.commons.math.util.MathUtils#equalsIncludingNaN(FFF)Z
org.apache.commons.math.util.MathUtils#equalsIncludingNaN(FFI)Z
org.apache.commons.math.util.MathUtils#equals([F[F)Z
org.apache.commons.math.util.MathUtils#equalsIncludingNaN([F[F)Z
org.apache.commons.math.util.MathUtils#equalsIncludingNaN(DD)Z
org.apache.commons.math.util.MathUtils#equals(DDD)Z
org.apache.commons.math.util.MathUtils#equalsIncludingNaN(DDD)Z
org.apache.commons.math.util.MathUtils#equalsIncludingNaN(DDI)Z
org.apache.commons.math.util.MathUtils#equals([D[D)Z
org.apache.commons.math.util.MathUtils#equalsIncludingNaN([D[D)Z
org.apache.commons.math.util.ResizableDoubleArray#addElement(D)V
org.apache.commons.math.util.ResizableDoubleArray#addElementRolling(D)D
org.apache.commons.math.util.ResizableDoubleArray#discardExtremeElements(IZI)V
org.apache.commons.math.util.ResizableDoubleArray#discardExtremeElements(IZ)V
org.apache.commons.math.util.OpenIntToDoubleHashMap#get(I)D
org.apache.commons.math.util.OpenIntToDoubleHashMap#containsKey(I)Z
org.apache.commons.math.util.OpenIntToDoubleHashMap#remove(I)D
org.apache.commons.math.dfp.DfpMathTest#test(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;ILjava/lang/String;)V
org.apache.commons.math.dfp.DfpDecTest#test(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;ILjava/lang/String;)V
org.apache.commons.math.dfp.DfpTest#test(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;ILjava/lang/String;)V
org.apache.commons.math.util.FastMathStrictComparisonTest#reportFailedResults(Ljava/lang/reflect/Method;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[I)V
org.apache.commons.math.analysis.solvers.LaguerreSolver#solve([Lorg/apache/commons/math/complex/Complex;Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.dfp.DfpMath#splitMult([Lorg/apache/commons/math/dfp/Dfp;[Lorg/apache/commons/math/dfp/Dfp;)[Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#expInternal(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#log(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#logInternal([Lorg/apache/commons/math/dfp/Dfp;)[Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#pow(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#sinInternal([Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#cosInternal([Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#sin(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#cos(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#atanInternal(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#atan(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpMath#acos(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.Dfp#lessThan(Lorg/apache/commons/math/dfp/Dfp;)Z
org.apache.commons.math.dfp.Dfp#greaterThan(Lorg/apache/commons/math/dfp/Dfp;)Z
org.apache.commons.math.dfp.Dfp#equals(Ljava/lang/Object;)Z
org.apache.commons.math.dfp.Dfp#unequal(Lorg/apache/commons/math/dfp/Dfp;)Z
org.apache.commons.math.dfp.Dfp#intValue()I
org.apache.commons.math.dfp.Dfp#add(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.Dfp#multiply(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.Dfp#divide(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.Dfp#sqrt()Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.Dfp#nextAfter(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.Dfp#toDouble()D
org.apache.commons.math.dfp.DfpField#computePi(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpField#computeExp(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpField#computeLn(Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.dfp.DfpDec#nextAfter(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.geometry.Vector3D#isInfinite()Z
org.apache.commons.math.geometry.Vector3D#equals(Ljava/lang/Object;)Z
org.apache.commons.math.geometry.Vector3D#hashCode()I
org.apache.commons.math.linear.BigMatrixImpl#getDeterminant()Ljava/math/BigDecimal;
org.apache.commons.math.linear.BigMatrixImpl#solve(Lorg/apache/commons/math/linear/BigMatrix;)Lorg/apache/commons/math/linear/BigMatrix;
org.apache.commons.math.linear.SparseFieldVector#add(Lorg/apache/commons/math/linear/SparseFieldVector;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#subtract(Lorg/apache/commons/math/linear/SparseFieldVector;)Lorg/apache/commons/math/linear/SparseFieldVector;
org.apache.commons.math.linear.SparseFieldVector#subtract([Lorg/apache/commons/math/FieldElement;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.ArrayRealVector#isInfinite()Z
org.apache.commons.math.linear.ArrayRealVector#hashCode()I
org.apache.commons.math.linear.OpenMapRealMatrix#multiply(Lorg/apache/commons/math/linear/OpenMapRealMatrix;)Lorg/apache/commons/math/linear/OpenMapRealMatrix;
org.apache.commons.math.linear.OpenMapRealVector#add(Lorg/apache/commons/math/linear/OpenMapRealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.linear.OpenMapRealVector#getDistance(Lorg/apache/commons/math/linear/OpenMapRealVector;)D
org.apache.commons.math.linear.OpenMapRealVector#getL1Distance(Lorg/apache/commons/math/linear/OpenMapRealVector;)D
org.apache.commons.math.linear.OpenMapRealVector#getLInfDistance(Lorg/apache/commons/math/linear/OpenMapRealVector;)D
org.apache.commons.math.linear.OpenMapRealVector#subtract(Lorg/apache/commons/math/linear/OpenMapRealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.ode.events.CombinedEventsManager#evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z
org.apache.commons.math.optimization.linear.SimplexTableau#equals(Ljava/lang/Object;)Z
org.apache.commons.math.optimization.linear.SimplexSolver#solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V
org.apache.commons.math.optimization.linear.SimplexSolver#doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;
org.apache.commons.math.stat.descriptive.StatisticalSummaryValues#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.descriptive.SummaryStatistics#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics#equals(Ljava/lang/Object;)Z
org.apache.commons.math.stat.ranking.NaturalRanking#removeNaNs([Lorg/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair;)[Lorg/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair;
org.apache.commons.math.transform.FastFourierTransformer#verifyDataSet([Ljava/lang/Object;)V
org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode()V
org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation()V
org.apache.commons.math.util.MultidimensionalCounterTest#testIterationConsistency()V
org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode()V
org.apache.commons.math.util.MathUtilsTest#testEquals()V
org.apache.commons.math.util.MathUtilsTest#testEqualsIncludingNaN()V
org.apache.commons.math.util.FastMathTest#cbrt(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;
org.apache.commons.math.fraction.BigFraction#add(Lorg/apache/commons/math/fraction/BigFraction;)Lorg/apache/commons/math/fraction/BigFraction;
org.apache.commons.math.fraction.BigFraction#subtract(Lorg/apache/commons/math/fraction/BigFraction;)Lorg/apache/commons/math/fraction/BigFraction;
org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode()V
org.apache.commons.math.complex.Complex#abs()D
org.apache.commons.math.complex.Complex#conjugate()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#equals(Ljava/lang/Object;)Z
org.apache.commons.math.complex.Complex#hashCode()I
org.apache.commons.math.complex.Complex#multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#multiply(D)Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#negate()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#subtract(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#acos()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#asin()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#atan()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#cos()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#cosh()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#exp()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#log()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#sin()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#sinh()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#sqrt()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#tan()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#tanh()Lorg/apache/commons/math/complex/Complex;
org.apache.commons.math.complex.Complex#nthRoot(I)Ljava/util/List;
org.apache.commons.math.estimation.GaussNewtonEstimator#estimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V
org.apache.commons.math.estimation.SimpleEstimationProblem#getUnboundParameters()[Lorg/apache/commons/math/estimation/EstimatedParameter;
org.apache.commons.math.genetics.Chromosome#findSameChromosome(Lorg/apache/commons/math/genetics/Population;)Lorg/apache/commons/math/genetics/Chromosome;
org.apache.commons.math.linear.BigMatrixImpl#getTrace()Ljava/math/BigDecimal;
org.apache.commons.math.linear.SparseFieldVector#append(Lorg/apache/commons/math/linear/SparseFieldVector;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#dotProduct(Lorg/apache/commons/math/linear/FieldVector;)Lorg/apache/commons/math/FieldElement;
org.apache.commons.math.linear.SparseFieldVector#dotProduct([Lorg/apache/commons/math/FieldElement;)Lorg/apache/commons/math/FieldElement;
org.apache.commons.math.linear.SparseFieldVector#ebeDivide(Lorg/apache/commons/math/linear/FieldVector;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#ebeDivide([Lorg/apache/commons/math/FieldElement;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#ebeMultiply(Lorg/apache/commons/math/linear/FieldVector;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#ebeMultiply([Lorg/apache/commons/math/FieldElement;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#getData()[Lorg/apache/commons/math/FieldElement;
org.apache.commons.math.linear.SparseFieldVector#getSubVector(II)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#mapDivideToSelf(Lorg/apache/commons/math/FieldElement;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#mapMultiplyToSelf(Lorg/apache/commons/math/FieldElement;)Lorg/apache/commons/math/linear/FieldVector;
org.apache.commons.math.linear.SparseFieldVector#outerProduct(Lorg/apache/commons/math/linear/SparseFieldVector;)Lorg/apache/commons/math/linear/FieldMatrix;
org.apache.commons.math.linear.SparseFieldVector#outerProduct([Lorg/apache/commons/math/FieldElement;)Lorg/apache/commons/math/linear/FieldMatrix;
org.apache.commons.math.linear.SparseFieldVector#hashCode()I
org.apache.commons.math.linear.SparseFieldVector#equals(Ljava/lang/Object;)Z
org.apache.commons.math.linear.OpenMapRealMatrix#add(Lorg/apache/commons/math/linear/OpenMapRealMatrix;)Lorg/apache/commons/math/linear/OpenMapRealMatrix;
org.apache.commons.math.linear.OpenMapRealMatrix#subtract(Lorg/apache/commons/math/linear/OpenMapRealMatrix;)Lorg/apache/commons/math/linear/OpenMapRealMatrix;
org.apache.commons.math.linear.OpenMapRealMatrix#multiply(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;
org.apache.commons.math.linear.OpenMapRealVector#<init>([DD)V
org.apache.commons.math.linear.OpenMapRealVector#<init>([Ljava/lang/Double;D)V
org.apache.commons.math.linear.OpenMapRealVector#<init>(Lorg/apache/commons/math/linear/RealVector;)V
org.apache.commons.math.linear.OpenMapRealVector#append(Lorg/apache/commons/math/linear/OpenMapRealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.linear.OpenMapRealVector#dotProduct(Lorg/apache/commons/math/linear/OpenMapRealVector;)D
org.apache.commons.math.linear.OpenMapRealVector#ebeDivide(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.linear.OpenMapRealVector#ebeDivide([D)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.linear.OpenMapRealVector#ebeMultiply(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.linear.OpenMapRealVector#ebeMultiply([D)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.linear.OpenMapRealVector#getSubVector(II)Lorg/apache/commons/math/linear/OpenMapRealVector;
org.apache.commons.math.linear.OpenMapRealVector#getData()[D
org.apache.commons.math.linear.OpenMapRealVector#isInfinite()Z
org.apache.commons.math.linear.OpenMapRealVector#isNaN()Z
org.apache.commons.math.linear.OpenMapRealVector#outerProduct([D)Lorg/apache/commons/math/linear/RealMatrix;
org.apache.commons.math.linear.OpenMapRealVector#unitize()V
org.apache.commons.math.linear.OpenMapRealVector#hashCode()I
org.apache.commons.math.linear.OpenMapRealVector#equals(Ljava/lang/Object;)Z
org.apache.commons.math.ode.events.CombinedEventsManager#stop()Z
org.apache.commons.math.util.OpenIntToFieldHashMap#put(ILorg/apache/commons/math/FieldElement;)Lorg/apache/commons/math/FieldElement;
org.apache.commons.math.util.OpenIntToDoubleHashMap#put(ID)D
org.apache.commons.math.dfp.DfpTest#testCompare()V
org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored()V
org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction()V
org.apache.commons.math.estimation.EstimatedParameterTest#testBound()V
org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied()V
#------------------------------------------------------------------------
#Project=colt  -  102_colt
#------------------------------------------------------------------------
cern.colt.GenericSortingTest#testRandomly(I)V
cern.colt.matrix.DoubleFactory2D#sample(Lcern/colt/matrix/DoubleMatrix2D;DD)Lcern/colt/matrix/DoubleMatrix2D;
cern.colt.matrix.DoubleFactory1D#sample(IDD)Lcern/colt/matrix/DoubleMatrix1D;
cern.colt.matrix.impl.Benchmark#benchmark(IILjava/lang/String;ZIDDD)V
cern.jet.random.sampling.WeightedRandomSampler#test(II)V
cern.jet.random.sampling.RandomSamplingAssistant#sampleArray(I[I)[I
cern.jet.random.sampling.RandomSamplingAssistant#test(JJ)V
hep.aida.bin.MightyStaticBin1D#moment(ID)D
hep.aida.bin.MightyStaticBin1D#sumOfPowers(I)D
hep.aida.bin.DynamicBin1D#sample(IZLcern/jet/random/engine/RandomEngine;Lcern/colt/buffer/DoubleBuffer;)V
cern.colt.matrix.DoubleMatrix1D#assign(Lcern/colt/matrix/DoubleMatrix1D;)Lcern/colt/matrix/DoubleMatrix1D;
cern.colt.matrix.ObjectMatrix3D#assign(Lcern/colt/matrix/ObjectMatrix3D;)Lcern/colt/matrix/ObjectMatrix3D;
cern.colt.matrix.DoubleMatrix3D#assign(Lcern/colt/matrix/DoubleMatrix3D;)Lcern/colt/matrix/DoubleMatrix3D;
cern.colt.matrix.ObjectMatrix2D#assign(Lcern/colt/matrix/ObjectMatrix2D;)Lcern/colt/matrix/ObjectMatrix2D;
cern.colt.matrix.ObjectMatrix1D#assign(Lcern/colt/matrix/ObjectMatrix1D;)Lcern/colt/matrix/ObjectMatrix1D;
cern.colt.matrix.DoubleMatrix2D#assign(Lcern/colt/matrix/DoubleMatrix2D;)Lcern/colt/matrix/DoubleMatrix2D;
cern.colt.matrix.impl.TestMatrix2D#doubleTest34()V
cern.colt.matrix.linalg.Property#isStrictlyTriangular(Lcern/colt/matrix/DoubleMatrix2D;)Z
cern.colt.matrix.linalg.Property#isTriangular(Lcern/colt/matrix/DoubleMatrix2D;)Z
cern.colt.matrix.linalg.Property#isUnitTriangular(Lcern/colt/matrix/DoubleMatrix2D;)Z
cern.colt.matrix.linalg.Algebra#inverse(Lcern/colt/matrix/DoubleMatrix2D;)Lcern/colt/matrix/DoubleMatrix2D;
cern.colt.matrix.linalg.QRDecomposition#solve(Lcern/colt/matrix/DoubleMatrix2D;)Lcern/colt/matrix/DoubleMatrix2D;
cern.jet.stat.quantile.DoubleBufferSet#forEach(Lcern/colt/function/DoubleProcedure;)Z
hep.aida.bin.MightyStaticBin1D#compareWith(Lhep/aida/bin/AbstractBin1D;)Ljava/lang/String;
hep.aida.bin.DynamicBin1D#equals(Ljava/lang/Object;)Z
cern.colt.bitvector.BitVector#toString()Ljava/lang/String;
cern.colt.bitvector.BitMatrix#forEachCoordinateInState(ZLcern/colt/function/IntIntProcedure;)Z
cern.colt.list.MinMaxNumberList#partFromTo(IILcern/colt/bitvector/BitVector;I[JI)V
cern.colt.list.CharArrayList#removeAll(Lcern/colt/list/AbstractCharList;)Z
cern.colt.list.DoubleArrayList#removeAll(Lcern/colt/list/AbstractDoubleList;)Z
cern.colt.list.ByteArrayList#removeAll(Lcern/colt/list/AbstractByteList;)Z
cern.colt.list.LongArrayList#removeAll(Lcern/colt/list/AbstractLongList;)Z
cern.colt.list.AbstractIntList#removeAll(Lcern/colt/list/AbstractIntList;)Z
cern.colt.list.AbstractIntList#retainAll(Lcern/colt/list/AbstractIntList;)Z
cern.colt.list.FloatArrayList#removeAll(Lcern/colt/list/AbstractFloatList;)Z
cern.colt.list.AbstractFloatList#removeAll(Lcern/colt/list/AbstractFloatList;)Z
cern.colt.list.AbstractFloatList#retainAll(Lcern/colt/list/AbstractFloatList;)Z
cern.colt.list.AbstractDoubleList#removeAll(Lcern/colt/list/AbstractDoubleList;)Z
cern.colt.list.AbstractDoubleList#retainAll(Lcern/colt/list/AbstractDoubleList;)Z
cern.colt.list.AbstractShortList#removeAll(Lcern/colt/list/AbstractShortList;)Z
cern.colt.list.AbstractShortList#retainAll(Lcern/colt/list/AbstractShortList;)Z
cern.colt.list.AbstractByteList#removeAll(Lcern/colt/list/AbstractByteList;)Z
cern.colt.list.AbstractByteList#retainAll(Lcern/colt/list/AbstractByteList;)Z
cern.colt.list.ShortArrayList#removeAll(Lcern/colt/list/AbstractShortList;)Z
cern.colt.list.AbstractBooleanList#removeAll(Lcern/colt/list/AbstractBooleanList;)Z
cern.colt.list.AbstractBooleanList#retainAll(Lcern/colt/list/AbstractBooleanList;)Z
cern.colt.list.AbstractCharList#removeAll(Lcern/colt/list/AbstractCharList;)Z
cern.colt.list.AbstractCharList#retainAll(Lcern/colt/list/AbstractCharList;)Z
cern.colt.list.BooleanArrayList#removeAll(Lcern/colt/list/AbstractBooleanList;)Z
cern.colt.list.IntArrayList#removeAll(Lcern/colt/list/AbstractIntList;)Z
cern.colt.list.AbstractLongList#removeAll(Lcern/colt/list/AbstractLongList;)Z
cern.colt.list.AbstractLongList#retainAll(Lcern/colt/list/AbstractLongList;)Z
cern.colt.matrix.bench.BenchmarkMatrix#runSpecial(DLjava/lang/String;Lcern/colt/matrix/bench/Double2DProcedure;)V
cern.colt.matrix.linalg.LUDecompositionQuick#decompose(Lcern/colt/matrix/DoubleMatrix2D;I)V
cern.colt.matrix.linalg.LUDecompositionQuick#det()D
cern.colt.matrix.linalg.LUDecompositionQuick#solve(Lcern/colt/matrix/DoubleMatrix1D;)V
cern.colt.matrix.linalg.LUDecompositionQuick#solve(Lcern/colt/matrix/DoubleMatrix2D;)V
cern.colt.matrix.linalg.LUDecompositionQuick#solveOld(Lcern/colt/matrix/DoubleMatrix2D;)V
cern.jet.random.EmpiricalWalker#setState2([D)V
cern.jet.stat.quantile.DoubleBufferSet#_getFirstEmptyBuffer()Lcern/jet/stat/quantile/DoubleBuffer;
cern.jet.stat.quantile.DoubleBufferSet#_getFullOrPartialBuffers()[Lcern/jet/stat/quantile/DoubleBuffer;
cern.jet.stat.quantile.DoubleBufferSet#_getFullOrPartialBuffersWithLevel(I)[Lcern/jet/stat/quantile/DoubleBuffer;
cern.jet.stat.quantile.DoubleBufferSet#_getMinLevelOfFullOrPartialBuffers()I
cern.jet.stat.quantile.DoubleBufferSet#_getNumberOfEmptyBuffers()I
cern.jet.stat.quantile.DoubleBufferSet#contains(D)Z
cern.jet.stat.quantile.DoubleBufferSet#phi(D)D
cern.jet.stat.quantile.DoubleBufferSet#toString()Ljava/lang/String;
cern.jet.stat.quantile.DoubleQuantileEstimator#add(D)V
hep.aida.bin.MightyStaticBin1D#getMinOrderForSumOfPowers()I
hep.aida.bin.MightyStaticBin1D#toString()Ljava/lang/String;
#------------------------------------------------------------------------
#Project=jblas  -  103_jblas
#------------------------------------------------------------------------
org.jblas.FloatMatrix#compare(Ljava/lang/Object;F)Z
org.jblas.DoubleMatrix#compare(Ljava/lang/Object;D)Z
org.jblas.ComplexFloatMatrix#findIndices()[I
org.jblas.ComplexFloatMatrix#equals(Ljava/lang/Object;)Z
org.jblas.ComplexFloatMatrix#assertSameSize(Lorg/jblas/ComplexFloatMatrix;)V
org.jblas.ComplexFloatMatrix#copy(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#andi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#ori(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#xori(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexDoubleMatrix#findIndices()[I
org.jblas.ComplexDoubleMatrix#equals(Ljava/lang/Object;)Z
org.jblas.ComplexDoubleMatrix#assertSameSize(Lorg/jblas/ComplexDoubleMatrix;)V
org.jblas.ComplexDoubleMatrix#copy(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#andi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#ori(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#xori(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.FloatMatrix#equals(Ljava/lang/Object;)Z
org.jblas.FloatMatrix#assertSameSize(Lorg/jblas/FloatMatrix;)V
org.jblas.FloatMatrix#copy(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#min()F
org.jblas.FloatMatrix#argmin()I
org.jblas.FloatMatrix#max()F
org.jblas.FloatMatrix#argmax()I
org.jblas.DoubleMatrix#equals(Ljava/lang/Object;)Z
org.jblas.DoubleMatrix#assertSameSize(Lorg/jblas/DoubleMatrix;)V
org.jblas.DoubleMatrix#copy(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#min()D
org.jblas.DoubleMatrix#argmin()I
org.jblas.DoubleMatrix#max()D
org.jblas.DoubleMatrix#argmax()I
org.jblas.ComplexFloatMatrix#put([ILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#put(I[ILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#put([IILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#put([I[ILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#assertMultipliesWith(Lorg/jblas/ComplexFloatMatrix;)V
org.jblas.ComplexFloatMatrix#assertSameLength(Lorg/jblas/ComplexFloatMatrix;)V
org.jblas.ComplexFloatMatrix#assertSquare()V
org.jblas.ComplexFloatMatrix#ensureResultLength(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)V
org.jblas.ComplexFloatMatrix#addi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#subi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#muli(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#mmuli(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#divi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#rdivi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#eqi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexFloatMatrix#nei(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;
org.jblas.Eigen#eigenvectors(Lorg/jblas/DoubleMatrix;)[Lorg/jblas/ComplexDoubleMatrix;
org.jblas.Eigen#eigenvectors(Lorg/jblas/FloatMatrix;)[Lorg/jblas/ComplexFloatMatrix;
org.jblas.ComplexDoubleMatrix#put([ILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#put(I[ILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#put([IILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#put([I[ILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#assertMultipliesWith(Lorg/jblas/ComplexDoubleMatrix;)V
org.jblas.ComplexDoubleMatrix#assertSameLength(Lorg/jblas/ComplexDoubleMatrix;)V
org.jblas.ComplexDoubleMatrix#assertSquare()V
org.jblas.ComplexDoubleMatrix#ensureResultLength(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)V
org.jblas.ComplexDoubleMatrix#addi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#subi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#muli(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#mmuli(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#divi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#rdivi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#eqi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexDoubleMatrix#nei(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;
org.jblas.ComplexFloat#ne(Lorg/jblas/ComplexFloat;)Z
org.jblas.ComplexDouble#ne(Lorg/jblas/ComplexDouble;)Z
org.jblas.FloatMatrix#put([ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#put(I[ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#put([IILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#put([I[ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#assertMultipliesWith(Lorg/jblas/FloatMatrix;)V
org.jblas.FloatMatrix#assertSameLength(Lorg/jblas/FloatMatrix;)V
org.jblas.FloatMatrix#assertSquare()V
org.jblas.FloatMatrix#ensureResultLength(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V
org.jblas.FloatMatrix#addi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#subi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#muli(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#mmuli(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#divi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#lti(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#gti(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#lei(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#gei(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#eqi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.FloatMatrix#nei(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;
org.jblas.DoubleMatrix#put([ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#put(I[ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#put([IILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#put([I[ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#assertMultipliesWith(Lorg/jblas/DoubleMatrix;)V
org.jblas.DoubleMatrix#assertSameLength(Lorg/jblas/DoubleMatrix;)V
org.jblas.DoubleMatrix#assertSquare()V
org.jblas.DoubleMatrix#ensureResultLength(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V
org.jblas.DoubleMatrix#addi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#subi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#muli(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#mmuli(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#divi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#lti(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#gti(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#lei(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#gei(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#eqi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.DoubleMatrix#nei(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;
org.jblas.benchmark.NativeFloatMultiplicationBenchmark#run(ID)Lorg/jblas/benchmark/BenchmarkResult;
org.jblas.benchmark.JavaFloatMultiplicationBenchmark#run(ID)Lorg/jblas/benchmark/BenchmarkResult;
org.jblas.benchmark.NativeDoubleMultiplicationBenchmark#run(ID)Lorg/jblas/benchmark/BenchmarkResult;
org.jblas.benchmark.JavaDoubleMultiplicationBenchmark#run(ID)Lorg/jblas/benchmark/BenchmarkResult;
#------------------------------------------------------------------------
#Project=jscience  -  104_jscience
#------------------------------------------------------------------------
org.jscience.JScience#multiplyMatrices([[D)V
org.jscience.mathematics.number.LargeInteger#compareTo(J)I
org.jscience.economics.money.Currency#getDefaultFractionDigits()I
org.jscience.mathematics.function.Polynomial#valueOf(Lorg/jscience/mathematics/structure/Ring;Lorg/jscience/mathematics/function/Term;)Lorg/jscience/mathematics/function/Polynomial;
org.jscience.mathematics.number.Real#valueOf(Ljava/lang/CharSequence;)Lorg/jscience/mathematics/number/Real;
org.jscience.mathematics.number.Real#inverse()Lorg/jscience/mathematics/number/Real;
org.jscience.mathematics.number.Real#toText()Ljavolution/text/Text;
org.jscience.mathematics.number.Real#equals(Ljava/lang/Object;)Z
org.jscience.mathematics.number.FloatingPoint#sqrt()Lorg/jscience/mathematics/number/FloatingPoint;
org.jscience.mathematics.number.FloatingPoint#hashCode()I
org.jscience.mathematics.number.LargeInteger#isOdd()Z
org.jscience.mathematics.number.LargeInteger#bitLength()I
org.jscience.mathematics.number.LargeInteger#digitLength()I
org.jscience.mathematics.number.LargeInteger#minus(Lorg/jscience/mathematics/number/LargeInteger;)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.LargeInteger#sqrt()Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.LargeInteger#mod(Lorg/jscience/mathematics/number/LargeInteger;)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.LargeInteger#modInverse(Lorg/jscience/mathematics/number/LargeInteger;)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.LargeInteger#modPow(Lorg/jscience/mathematics/number/LargeInteger;Lorg/jscience/mathematics/number/LargeInteger;)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.LargeInteger#equals(Ljava/lang/Object;)Z
org.jscience.mathematics.number.Rational#equals(Ljava/lang/Object;)Z
org.jscience.mathematics.number.Rational#normalize()Lorg/jscience/mathematics/number/Rational;
org.jscience.mathematics.number.ModuloInteger#setModulus(Lorg/jscience/mathematics/number/LargeInteger;)V
org.jscience.mathematics.function.Polynomial#plus(Lorg/jscience/mathematics/function/Polynomial;)Lorg/jscience/mathematics/function/Polynomial;
org.jscience.mathematics.function.Polynomial#times(Lorg/jscience/mathematics/function/Polynomial;)Lorg/jscience/mathematics/function/Polynomial;
org.jscience.mathematics.number.LargeInteger#shiftRight(I)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.geography.coordinates.UTM#getLatitudeZone(Lorg/jscience/geography/coordinates/LatLong;)C
org.jscience.geography.coordinates.UTM#getLongitudeZone(Lorg/jscience/geography/coordinates/LatLong;)I
org.jscience.mathematics.function.RationalFunction#equals(Ljava/lang/Object;)Z
org.jscience.mathematics.number.Real#getAccuracy()I
org.jscience.mathematics.number.Real#getPrecision()I
org.jscience.mathematics.number.Real#round()Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.Real#abs()Lorg/jscience/mathematics/number/Real;
org.jscience.mathematics.number.Real#sqrt()Lorg/jscience/mathematics/number/Real;
org.jscience.mathematics.number.Real#compareTo(Lorg/jscience/mathematics/number/Real;)I
org.jscience.mathematics.number.FloatingPoint#valueOf(Ljava/lang/CharSequence;)Lorg/jscience/mathematics/number/FloatingPoint;
org.jscience.mathematics.number.FloatingPoint#round()Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.FloatingPoint#inverse()Lorg/jscience/mathematics/number/FloatingPoint;
org.jscience.mathematics.number.FloatingPoint#divide(Lorg/jscience/mathematics/number/FloatingPoint;)Lorg/jscience/mathematics/number/FloatingPoint;
org.jscience.mathematics.number.FloatingPoint#isZero()Z
org.jscience.mathematics.number.FloatingPoint#toText()Ljavolution/text/Text;
org.jscience.mathematics.number.FloatingPoint#compareTo(Lorg/jscience/mathematics/number/FloatingPoint;)I
org.jscience.mathematics.number.LargeInteger#valueOf(Ljava/lang/CharSequence;I)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.LargeInteger#divide(Lorg/jscience/mathematics/number/LargeInteger;)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.LargeInteger#inverseScaled(I)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.LargeInteger#gcd(Lorg/jscience/mathematics/number/LargeInteger;)Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.Rational#round()Lorg/jscience/mathematics/number/LargeInteger;
org.jscience.mathematics.number.Rational#inverse()Lorg/jscience/mathematics/number/Rational;
org.jscience.mathematics.number.Rational#doubleValue()D
org.jscience.mathematics.vector.LUDecomposition#valueOf(Lorg/jscience/mathematics/vector/Matrix;)Lorg/jscience/mathematics/vector/LUDecomposition;
org.jscience.mathematics.vector.Matrix#pseudoInverse()Lorg/jscience/mathematics/vector/Matrix;
#-------- Total: 406--------